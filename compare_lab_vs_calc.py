import json
import cmath

def polar_to_complex(mag, angle_deg):
    return cmath.rect(mag, cmath.pi * angle_deg / 180)

def complex_to_polar(c):
    return abs(c), cmath.phase(c) * 180 / cmath.pi

def show(label, value):
    mag, ang = complex_to_polar(value)
    print(f"{label} = {mag:.3f} kA ‚à† {ang:.2f}¬∞")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–æ–≤ –∏–∑ LabRZA ---
with open("lab_data.json", "r", encoding="utf-8") as f:
    data = json.load(f)

IA = polar_to_complex(*data["IA"])
IB = polar_to_complex(*data["IB"])
IC = polar_to_complex(*data["IC"])

print("üìä –¢–æ–∫–∏ –∏–∑ LabRZA (–≤ –∫–ê):")
show("IA", IA)
show("IB", IB)
show("IC", IC)

# --- –†–∞—Å—á—ë—Ç —Ç–æ–∫–∞ –ö–ó –≤—Ä—É—á–Ω—É—é ---
U_phase = 220_000 / (3 ** 0.5)  # –í
Z_total = complex(4.2701, 4.0)  # –û–º

I_calc = U_phase / Z_total      # –ê
I_calc_ka = I_calc / 1000       # –∫–ê

print("\nüìê –†–∞—Å—á—ë—Ç–Ω—ã–π —Ç–æ–∫ –ö–ó –≤—Ä—É—á–Ω—É—é:")
show("I_calc", I_calc_ka)

# --- –§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è ---
def compare(label, i_lab, i_calc):
    mag_lab, ang_lab = complex_to_polar(i_lab)
    mag_calc, ang_calc = complex_to_polar(i_calc)
    print(f"\nüìâ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ {label}:")
    print(f"  –ú–æ–¥—É–ª—å: Iab = {mag_lab:.3f} kA | –†–∞—Å—á—ë—Ç = {mag_calc:.3f} kA | Œî = {abs(mag_lab - mag_calc):.3f} kA")
    print(f"  –§–∞–∑–∞:   Iab = {ang_lab:.2f}¬∞ | –†–∞—Å—á—ë—Ç = {ang_calc:.2f}¬∞ | Œî = {abs(ang_lab - ang_calc):.2f}¬∞")

# --- –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–æ–∫–æ–≤ LabRZA —Å —Ä–∞—Å—á—ë—Ç–Ω—ã–º ---
compare("IA", IA, I_calc_ka)
compare("IB", IB, I_calc_ka)
compare("IC", IC, I_calc_ka)
